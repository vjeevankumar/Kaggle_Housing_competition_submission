{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vjeevankumar/Kaggle_Housing_competition_submission/blob/master/kaggle_comp1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q7nA9v1VIcTt",
        "colab_type": "code",
        "outputId": "1276646d-5933-4b02-b3f3-487def0b39af",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-dc9100ce-bc40-4319-912b-d9deb94bc7b2\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-dc9100ce-bc40-4319-912b-d9deb94bc7b2\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving train.csv to train (2).csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P44MEfKeFU9q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b86qSpcrGPPA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BkEf8jeWKV6F",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import io\n",
        "import pandas as pd\n",
        "df2 = pd.read_csv(io.BytesIO(uploaded['train.csv']))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dhjUw4bCLCKc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "tt= IterativeImputer(random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AXemOaF8LOLk",
        "colab_type": "code",
        "outputId": "ddcc1150-eb77-4808-de3f-b3937493ff50",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "import numpy as np\n",
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "imp = IterativeImputer(max_iter=10, random_state=0)\n",
        "imp.fit([[1, 2], [3, 6], [4, 8], [np.nan, 3], [7, np.nan]])  \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "X_test = [[np.nan, 2], [6, np.nan], [np.nan, 6]]\n",
        "## the model learns that the second feature is double the first\n",
        "print(np.round(imp.transform(X_test)))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 1.  2.]\n",
            " [ 6. 12.]\n",
            " [ 3.  6.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o7bFl3e9LkQE",
        "colab_type": "code",
        "outputId": "a9ac7ac6-79de-44c7-c5b8-e2023591ec69",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        }
      },
      "source": [
        "tt.fit(df2)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-98e06134a033>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/impute/_iterative.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    674\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m         \"\"\"\n\u001b[0;32m--> 676\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/impute/_iterative.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    541\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitial_imputer_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 543\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask_missing_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_initial_imputation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    544\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    545\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_iter\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmask_missing_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/impute/_iterative.py\u001b[0m in \u001b[0;36m_initial_imputation\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    470\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    471\u001b[0m         X = check_array(X, dtype=FLOAT_DTYPES, order=\"F\",\n\u001b[0;32m--> 472\u001b[0;31m                         force_all_finite=force_all_finite)\n\u001b[0m\u001b[1;32m    473\u001b[0m         \u001b[0m_check_inputs_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmissing_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    494\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    495\u001b[0m                 \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msimplefilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 496\u001b[0;31m                 \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    497\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    498\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/numeric.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m    536\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m     \"\"\"\n\u001b[0;32m--> 538\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'RL'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YZOjkMG1MHW8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#df2.isnull().sum()\n",
        "#import numpy as np\n",
        "\n",
        "#name=np.array(df2.isnull().sum())\n",
        "\n",
        "#df2.isnull().sum()\n",
        "\n",
        "\n",
        "#df2.groupby('MiscFeature')['MiscFeature'].count()\n",
        "#15+445+864+128\n",
        "#df2.groupby(['revenue','session','user_id'])['user_id'].sum()\n",
        "#name\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "3nambS4LOhem",
        "outputId": "6473ebb5-2898-47d8-b913-50847095eb44",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 74
        }
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-cfc11df8-cd1e-48f8-9762-ba15ffde31eb\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-cfc11df8-cd1e-48f8-9762-ba15ffde31eb\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving train.csv to train.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gnfWMy4NOsAB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import io\n",
        "import pandas as pd\n",
        "df2 = pd.read_csv(io.BytesIO(uploaded['train.csv']))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UuhB2ldeMvHU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2['GarageYrBlt'] =df2['GarageYrBlt'].fillna(0)\n",
        "df2[['Alley','MasVnrType','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','Fence','MiscFeature','PoolQC','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n",
        "     'BsmtFinType2','GarageYrBlt']]= df2[['Alley','MasVnrType','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','Fence','MiscFeature','PoolQC','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','GarageYrBlt']].fillna('NA')\n",
        "df2.loc[948,'BsmtExposure'] ='NA'\n",
        "df2.loc[332,['BsmtFinType2']] ='Unf'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ie3QIUn3sSKm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "ct_cols =['MSZoning','Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','LandSlope','Condition1','Condition2','BldgType','HouseStyle',\n",
        "'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','Neighborhood','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical',\n",
        "'KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\n",
        "df3 = df2\n",
        "\n",
        "#cols_to_transform = [ 'a', 'list', 'of', 'categorical', 'column', 'names' ]\n",
        "df_with_dummies = pd.get_dummies(df3, columns = ct_cols)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FuTrPesDlkXm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_with_dummies['LotFrontage']=df_with_dummies['LotFrontage'].fillna(70.049958)\n",
        "df_with_dummies['MasVnrArea']=df_with_dummies['MasVnrArea'].fillna(103.685262)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Tl4bFZ5gbBn",
        "colab_type": "code",
        "outputId": "bec597ca-850a-41cc-a209-95b2d993bf6d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "from pandas import read_csv\n",
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "# load data\n",
        "#url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\n",
        "#names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\n",
        "#dataframe = read_csv(url, names=names)\n",
        "\n",
        "X = df_with_dummies.drop('Id',axis=1)\n",
        "X = X.drop('SalePrice',axis=1)\n",
        "#x_full = df2.drop(37,axis=1)\n",
        "Y = df_with_dummies['SalePrice']\n",
        "# feature extraction\n",
        "model = ExtraTreesClassifier()\n",
        "model.fit(X, Y)\n",
        "#print(model.feature_importances_)\n",
        "\n",
        "test =model.feature_importances_\n",
        "print(test)\n",
        "\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
            "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[1.02841464e-02 1.71540154e-02 2.26392854e-02 1.49989756e-02\n",
            " 1.10290159e-02 1.72122045e-02 1.83469556e-02 1.29988967e-02\n",
            " 1.66174810e-02 4.26513387e-03 2.07742744e-02 1.90266601e-02\n",
            " 1.89534697e-02 1.31094240e-02 7.19637179e-04 2.01184837e-02\n",
            " 1.02217824e-02 3.14283396e-03 7.03828155e-03 8.14953536e-03\n",
            " 1.23341350e-02 1.22312721e-03 1.66588129e-02 7.77114152e-03\n",
            " 1.62436392e-02 9.73235408e-03 1.92666295e-02 1.51907642e-02\n",
            " 1.61583760e-02 5.41001719e-03 1.64878726e-03 4.30236050e-03\n",
            " 3.77912586e-04 1.83673483e-03 2.07811312e-02 1.63763357e-02\n",
            " 2.77479523e-04 1.83958462e-03 7.12155857e-04 4.64018569e-03\n",
            " 3.92459585e-03 0.00000000e+00 6.87113793e-05 1.29696588e-03\n",
            " 2.50412520e-03 9.31491435e-04 8.29021543e-03 1.20294090e-03\n",
            " 3.25233862e-04 7.71481657e-03 1.45672110e-03 1.31639608e-03\n",
            " 3.86764905e-04 4.34307569e-03 6.87113793e-05 0.00000000e+00\n",
            " 8.74073178e-03 3.71501000e-03 1.42221585e-03 2.31716804e-04\n",
            " 9.69238187e-03 1.78787275e-03 1.18970542e-03 4.36808054e-04\n",
            " 1.80462015e-03 1.75759984e-03 1.83230345e-04 1.71735964e-03\n",
            " 2.07462432e-03 6.62253486e-03 4.33831287e-04 1.16815097e-03\n",
            " 5.62442994e-04 1.32692223e-03 1.35571763e-04 2.74845517e-04\n",
            " 1.37422759e-04 2.74845517e-04 4.92431551e-04 0.00000000e+00\n",
            " 1.44293896e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 4.29264395e-03 1.47303861e-03 1.21907478e-03 1.37955465e-03\n",
            " 3.57676056e-03 4.57277030e-03 7.09329364e-04 7.85143483e-03\n",
            " 2.81716655e-04 4.16480687e-04 6.29975036e-03 4.99138930e-04\n",
            " 3.22626965e-03 3.96235620e-04 6.85428954e-03 2.07114853e-04\n",
            " 7.24022443e-03 1.37422759e-04 0.00000000e+00 0.00000000e+00\n",
            " 9.54623134e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 7.02382988e-05 1.37422759e-04 2.06134138e-04 6.88712861e-04\n",
            " 0.00000000e+00 7.11653571e-05 1.84726887e-03 7.06200287e-05\n",
            " 1.45671600e-03 4.80253370e-03 2.07854611e-04 5.73867572e-03\n",
            " 2.83970327e-03 1.37422759e-04 8.38830986e-04 5.84744641e-03\n",
            " 4.07141725e-03 1.20355276e-03 4.45338089e-04 0.00000000e+00\n",
            " 3.80603251e-04 9.15536486e-04 6.87113793e-05 1.90693520e-03\n",
            " 5.99237360e-03 2.83243575e-04 4.35626562e-03 6.87113793e-05\n",
            " 3.76477665e-03 2.06134138e-04 7.63231400e-04 7.81467926e-03\n",
            " 4.88848409e-03 1.40858153e-03 4.39123602e-04 8.89834616e-03\n",
            " 3.44806194e-04 8.65927870e-03 2.95698857e-03 1.23760847e-03\n",
            " 1.37422759e-04 3.86524017e-03 3.06819099e-03 1.72835546e-04\n",
            " 8.81967002e-04 4.21226695e-03 0.00000000e+00 4.70198064e-03\n",
            " 3.15294727e-03 4.97730236e-03 4.07133137e-03 3.53225401e-04\n",
            " 2.29037931e-04 1.42330714e-04 5.66234186e-04 0.00000000e+00\n",
            " 3.93595881e-04 2.05858405e-03 6.86572568e-04 4.37830399e-03\n",
            " 1.45800738e-03 3.12062424e-03 2.08580250e-03 9.94433710e-04\n",
            " 3.45465546e-04 1.87500967e-03 4.55146664e-03 2.31413326e-04\n",
            " 1.36523361e-03 1.58653444e-03 2.45874001e-03 2.51474997e-03\n",
            " 7.43734211e-04 1.98274241e-03 2.14831233e-03 2.69766555e-03\n",
            " 9.20150615e-04 1.43366514e-03 2.77488262e-04 2.34577933e-03\n",
            " 1.20011988e-03 5.41244946e-03 6.08388574e-04 4.52697977e-03\n",
            " 1.99800319e-03 1.82917102e-03 4.42726310e-04 0.00000000e+00\n",
            " 4.44506448e-03 6.38815593e-03 4.33454482e-03 4.03259651e-03\n",
            " 7.03991189e-04 8.25889506e-03 6.68339893e-03 4.72836534e-03\n",
            " 7.17531285e-03 2.47653649e-03 6.38632509e-04 4.14305112e-03\n",
            " 8.56896343e-03 9.54696653e-04 9.64436359e-04 6.22305858e-04\n",
            " 1.95540017e-03 5.91369706e-04 1.47824222e-03 4.68158026e-03\n",
            " 1.37422759e-04 5.33331182e-04 6.90088990e-04 1.38262694e-04\n",
            " 0.00000000e+00 5.72594827e-05 7.08441753e-03 2.66259503e-03\n",
            " 6.22378968e-03 0.00000000e+00 6.06641364e-03 1.88391374e-03\n",
            " 2.21547529e-03 2.06507193e-03 9.06503662e-04 1.37422759e-04\n",
            " 0.00000000e+00 2.74010268e-03 2.28825252e-03 1.17975653e-03\n",
            " 6.66352803e-03 5.05650874e-03 4.47356769e-04 0.00000000e+00\n",
            " 8.09736571e-04 7.25662041e-04 7.57335184e-04 0.00000000e+00\n",
            " 3.11353914e-03 7.73112082e-04 1.78976349e-03 7.10333206e-03\n",
            " 6.17013073e-03 1.01210582e-03 7.02839505e-03 1.97601352e-04\n",
            " 6.98068652e-03 7.04291189e-04 2.31296398e-03 2.97749310e-04\n",
            " 5.39792970e-03 1.19265648e-03 7.29937229e-03 1.39679093e-03\n",
            " 7.39702317e-03 6.69073776e-03 6.87113793e-05 1.45349171e-03\n",
            " 3.66460689e-04 1.05488365e-03 2.75252970e-04 2.87691043e-03\n",
            " 1.37422759e-04 1.59237215e-03 5.08609958e-04 1.06873838e-03\n",
            " 2.06134138e-04 1.82600474e-03 1.94022395e-03 6.78715735e-04\n",
            " 2.62945163e-03 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
            " 0.00000000e+00 2.09705473e-03 2.08845224e-03 4.41385064e-03\n",
            " 3.45520079e-04 6.69547992e-03 6.87113793e-05 2.49219709e-03\n",
            " 0.00000000e+00 1.50145503e-03 1.51509476e-04 1.72022773e-03\n",
            " 1.37422759e-04 2.07129955e-04 3.07565221e-04 6.93432080e-05\n",
            " 4.76398896e-04 2.83772276e-03 6.87113793e-05 4.76512285e-03\n",
            " 3.83918523e-03 6.87113793e-05 4.35992731e-04 1.04467297e-03\n",
            " 5.98391028e-03 2.77867253e-03]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gJrpgkXHGCCu",
        "colab_type": "code",
        "outputId": "5c79123f-ccfc-4071-b810-4cb0121b3db3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "import numpy as np\n",
        "#tt=pd.DataFrame(test).T\n",
        "#print(tt)\n",
        "tt= test\n",
        "tt1=X.columns\n",
        "ttt=['features','importance']\n",
        "FS=pd.DataFrame(tt,tt1).sort_values(0,ascending=False)\n",
        "#FS.sort_values(0,ascending=False)\n",
        "#df.sort_values(\"Angle\", inplace=True)\n",
        "#for i in [0.002,0.0019,0.0018,0.0017,0.0016,0.0015]:\n",
        "#  print(i,FS[FS[0]>i].count(),FS[FS[0]>i].sum())\n",
        "  \n",
        "Final_FS = FS[FS[0]>0.0015]\n",
        "#Final_FS = FS[FS[0]>0.01]\n",
        "Final_FS.drop(0,axis=1,inplace=True)\n",
        "FT =list(Final_FS.T)\n",
        "\n",
        "#FT.dtypes\n",
        "clean_data = X[FT]\n",
        "#clean_data=clean_data.join(Y)\n",
        "print('test')\n",
        "\n",
        "\n"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py:3940: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
            "  errors=errors)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BbKhzVGKQcmk",
        "colab_type": "code",
        "outputId": "f31ee960-966f-491c-dc85-3cd6bc180278",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        }
      },
      "source": [
        "!pip install tpot"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting tpot\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/b5/4e/9ce813120662d9bd357aac6cb922f4b08b85049ed86eb47fe34a02d27f14/TPOT-0.10.2-py3-none-any.whl (75kB)\n",
            "\u001b[K     |████████████████████████████████| 81kB 5.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.6/dist-packages (from tpot) (1.3.0)\n",
            "Requirement already satisfied: numpy>=1.12.1 in /usr/local/lib/python3.6/dist-packages (from tpot) (1.16.4)\n",
            "Collecting deap>=1.0 (from tpot)\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/81/98/3166fb5cfa47bf516e73575a1515734fe3ce05292160db403ae542626b32/deap-1.3.0-cp36-cp36m-manylinux2010_x86_64.whl (151kB)\n",
            "\u001b[K     |████████████████████████████████| 153kB 16.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: tqdm>=4.26.0 in /usr/local/lib/python3.6/dist-packages (from tpot) (4.28.1)\n",
            "Collecting update-checker>=0.16 (from tpot)\n",
            "  Downloading https://files.pythonhosted.org/packages/17/c9/ab11855af164d03be0ff4fddd4c46a5bd44799a9ecc1770e01a669c21168/update_checker-0.16-py2.py3-none-any.whl\n",
            "Requirement already satisfied: pandas>=0.20.2 in /usr/local/lib/python3.6/dist-packages (from tpot) (0.24.2)\n",
            "Requirement already satisfied: joblib>=0.10.3 in /usr/local/lib/python3.6/dist-packages (from tpot) (0.13.2)\n",
            "Collecting stopit>=1.1.1 (from tpot)\n",
            "  Downloading https://files.pythonhosted.org/packages/35/58/e8bb0b0fb05baf07bbac1450c447d753da65f9701f551dca79823ce15d50/stopit-1.1.2.tar.gz\n",
            "Requirement already satisfied: scikit-learn>=0.18.1 in /usr/local/lib/python3.6/dist-packages (from tpot) (0.21.3)\n",
            "Requirement already satisfied: requests>=2.3.0 in /usr/local/lib/python3.6/dist-packages (from update-checker>=0.16->tpot) (2.21.0)\n",
            "Requirement already satisfied: python-dateutil>=2.5.0 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.20.2->tpot) (2.5.3)\n",
            "Requirement already satisfied: pytz>=2011k in /usr/local/lib/python3.6/dist-packages (from pandas>=0.20.2->tpot) (2018.9)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (2.8)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (2019.6.16)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->update-checker>=0.16->tpot) (3.0.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.5.0->pandas>=0.20.2->tpot) (1.12.0)\n",
            "Building wheels for collected packages: stopit\n",
            "  Building wheel for stopit (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for stopit: filename=stopit-1.1.2-cp36-none-any.whl size=11956 sha256=508581fe10fd65110586cbf874b0fa6979506af9dabb9ff63df4888f8a04e34f\n",
            "  Stored in directory: /root/.cache/pip/wheels/3c/85/2b/2580190404636bfc63e8de3dff629c03bb795021e1983a6cc7\n",
            "Successfully built stopit\n",
            "Installing collected packages: deap, update-checker, stopit, tpot\n",
            "Successfully installed deap-1.3.0 stopit-1.1.2 tpot-0.10.2 update-checker-0.16\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DuHxddMSGjyc",
        "colab_type": "code",
        "outputId": "a2d7725c-898b-4114-9533-795ae5056eb6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "X_train_normalized, X_test_normalized, y_train, y_test = train_test_split(clean_data_normalized, Y,\n",
        "                                                    train_size=0.75, test_size=0.25)\n",
        "\n",
        "\n",
        "MMS = MinMaxScaler()\n",
        "X_train =MMS.fit_transform(X_train_normalized)\n",
        "X_test =MMS.fit_transform(X_test_normalized)\n",
        "\n",
        "\n",
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape\n",
        "\n"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((1095, 151), (365, 151), (1095,), (365,))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S_Y-TjelQWbK",
        "colab_type": "code",
        "outputId": "37bd29c1-3f2a-4a03-e0fc-311b4c7b3b50",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "from tpot import TPOTRegressor\n",
        "tpot = TPOTRegressor(generations=5, population_size=50, verbosity=2)\n",
        "tpot.fit(X_train, y_train)\n",
        "print(tpot.score(X_test, y_test))\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "090494b982a1415cb9795f7ab9bb15a8",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(IntProgress(value=0, description='Optimization Progress', max=300, style=ProgressStyle(descript…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Generation 1 - Current best internal CV score: -979354994.8389399\n",
            "Generation 2 - Current best internal CV score: -979354994.8389399\n",
            "Generation 3 - Current best internal CV score: -924649910.4201851\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W5QyudfS3yla",
        "colab_type": "text"
      },
      "source": [
        "Best pipeline: RandomForestRegressor(RidgeCV(input_matrix), bootstrap=True, max_features=0.6500000000000001, min_samples_leaf=10, min_samples_split=4, n_estimators=100)\n",
        "-1034345962.7841212\n",
        "\n",
        "with 155 features\n",
        "Best pipeline: RandomForestRegressor(LassoLarsCV(MinMaxScaler(input_matrix), normalize=True), bootstrap=True, max_features=0.7000000000000001, min_samples_leaf=4, min_samples_split=14, n_estimators=100)\n",
        "-407773646.7237869"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cc9K_6Db3xY2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "ee807004-6201-4e1a-f671-d174ae92a1ff"
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.linear_model import LassoLarsCV\n",
        "#from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "#reg = LassoLarsCV(cv=5).fit(tt1, y_train)\n",
        "#LassoLarsCV( tt1, normalize=True),\n",
        "regr = RandomForestRegressor(bootstrap=True, max_features=0.7000000000000001, min_samples_leaf=4, min_samples_split=14, n_estimators=100)\n",
        "\n",
        "#tt= MinMaxScaler()\n",
        "#tt1=tt.fit_transform(X_train)\n",
        "regr.fit(X_train, y_train)  \n",
        "\n",
        "train_result = regr.score(X_train, y_train)\n",
        "\n",
        "# transform for MinMax scaler\n",
        "#tt2 = tt.fit_transform(X_test)\n",
        "\n",
        "xx=pd.DataFrame(regr.predict(X_test))\n",
        "test_result = regr.score(X_test, y_test)\n",
        "#xxx=pd.DataFrame(y_test, xx)\n",
        "\n",
        "print(train_result)\n",
        "print(test_result)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#164982.2909457 , 216346.2493097  -pred\n",
        "\n",
        "#1010    135000\n",
        "#1433    186500\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9267400236884131\n",
            "0.2272252469284931\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3lFmp5pnPlUO",
        "colab_type": "code",
        "outputId": "e489f793-22a9-4b88-9fbc-b11f28ce927c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "y_test"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "359     280000\n",
              "922     169990\n",
              "768     216837\n",
              "491     133000\n",
              "1129    140000\n",
              "1112    129900\n",
              "96      214000\n",
              "678     372500\n",
              "1397    137500\n",
              "466     167000\n",
              "1330    227000\n",
              "76      135750\n",
              "656     145500\n",
              "1148    116900\n",
              "762     215200\n",
              "1421    127500\n",
              "136     143000\n",
              "666     129000\n",
              "153     235000\n",
              "303     149900\n",
              "1015    227000\n",
              "566     325000\n",
              "1434    160000\n",
              "349     437154\n",
              "539     272000\n",
              "885     328900\n",
              "301     267000\n",
              "88       85000\n",
              "25      256300\n",
              "146     105000\n",
              "         ...  \n",
              "378     394432\n",
              "892     154500\n",
              "499     120000\n",
              "800     200000\n",
              "105     250000\n",
              "1293    162900\n",
              "1130    135000\n",
              "1300    225000\n",
              "1428    119000\n",
              "386      81000\n",
              "520     106250\n",
              "424     139000\n",
              "1404    105000\n",
              "1019    213490\n",
              "100     205000\n",
              "1173    200500\n",
              "181     200100\n",
              "35      309000\n",
              "211     186000\n",
              "775     162000\n",
              "1442    310000\n",
              "1327    130500\n",
              "400     245500\n",
              "968      37900\n",
              "1269    144000\n",
              "1256    301500\n",
              "1384    105000\n",
              "1390    235000\n",
              "1458    142125\n",
              "632      82500\n",
              "Name: SalePrice, Length: 365, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UKeD8Z0vK8-Z",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# create scaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# fit and transform in one step\n",
        "d2 = scaler.fit_transform(X_train)\n",
        "\n",
        "d2 = pd.DataFrame(d2)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IuIl0ME5J5_t",
        "colab_type": "code",
        "outputId": "d794dd4c-72ed-4e70-e643-3b510c78e55c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "X_train.index"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Int64Index([ 918, 1409,  445,  891,   68,  693,  880,  347,  886,  549,\n",
              "            ...\n",
              "             668, 1425,   42, 1356,  318, 1296,  377, 1458,  531, 1077],\n",
              "           dtype='int64', length=1095)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "du72IlGzDyKR",
        "colab_type": "code",
        "outputId": "7e3d4b3a-a57c-4a61-893c-86280770a33f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        ")#tt= list(test).sort()\n",
        "tt=list(test[0:307])\n",
        "tt.sort(reverse=True)\n",
        "print(tt)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.021515146315355567, 0.021277388045617678, 0.020967344793058385, 0.019681533005791833, 0.019552953287220256, 0.019221021337484493, 0.01918075063188882, 0.01892763672488019, 0.018736914569975435, 0.018529541715354585, 0.018519096052765287, 0.017572429124256522, 0.016546400127474388, 0.015924470598583602, 0.015923581911775002, 0.015533150436688032, 0.015337663007175378, 0.015276920013440285, 0.01214601613148224, 0.011757793983045576, 0.011285865525561718, 0.01096052774187515, 0.010467080714822661, 0.009717727761768935, 0.009274088709630805, 0.009212732494007406, 0.00890444236863682, 0.008712392876580825, 0.008627371851790518, 0.008179670436729475, 0.007989394454496828, 0.0078741635865434, 0.007686365129881007, 0.0075756324187566965, 0.007499769201662366, 0.007455619611859666, 0.007438486564431332, 0.0073362884484767885, 0.0072931758790428635, 0.007071219885581537, 0.007046412499080413, 0.0069694186881401705, 0.0069536489444997395, 0.006933799106059242, 0.00685855291231964, 0.006752944137032556, 0.006423434738857603, 0.006422317752777419, 0.0063320073800714445, 0.006278303404988239, 0.0062739228176357685, 0.0061067722493668986, 0.005942178056044348, 0.0058800753630422285, 0.005781595826282571, 0.00576552640686818, 0.00556590649942807, 0.005544489845417997, 0.0054111597694594185, 0.0053685623789324274, 0.005366882295642689, 0.005359128136422571, 0.005261236771364503, 0.005121528377319134, 0.005064721458983962, 0.005056350424048638, 0.005007289220366558, 0.0049631039784344844, 0.0047378809275656015, 0.004606025515821689, 0.004587117957624584, 0.0045797089054901, 0.00457901530043355, 0.004503837457335956, 0.00449342559978298, 0.0044541323670685955, 0.004435042367221071, 0.004416843508916601, 0.004392648587229537, 0.004391135844970717, 0.004391087324320085, 0.004287928094251726, 0.00427436127490941, 0.004209221762151478, 0.004200513132430051, 0.004160648022601838, 0.004071623990497335, 0.004068639393630756, 0.004051884738317074, 0.0039653189149598065, 0.0037262523596011247, 0.003708103626344158, 0.0036043358073533103, 0.0035074606274090752, 0.003357453002355199, 0.003255823518723009, 0.003223761514511759, 0.003095146749713593, 0.0030166937245781943, 0.002992222692984523, 0.002986372902513426, 0.002867231985748313, 0.002803352442019512, 0.0027970837443854245, 0.0027935752103837946, 0.0027919937396619805, 0.002791618515880585, 0.00263592814509139, 0.00261387765076019, 0.00257808588902423, 0.002575335009203316, 0.0025292431433401623, 0.0025106488314771093, 0.002484383384541017, 0.0024004946996903386, 0.002366167610237286, 0.0023449592078705938, 0.0023299810389035354, 0.002308057410750524, 0.0023040961891251676, 0.0022723714682211385, 0.0022590422046078725, 0.0022088181013253426, 0.0021700946817796983, 0.0021277245525510545, 0.002124856895652359, 0.0021043101568140347, 0.0020946409291795415, 0.0020514636916781986, 0.001987525857213119, 0.0019111811271843332, 0.001882489764257742, 0.0018140602303148355, 0.0017559348750049593, 0.0017417690164215766, 0.0017358677759612782, 0.001735836484038695, 0.0017269203050763206, 0.0017078365372073874, 0.0017044132683223744, 0.00166827326566156, 0.001667020628092256, 0.0016508190302753638, 0.0016141295454661399, 0.0016137431590308514, 0.0015600807838876186, 0.0015546345228928588, 0.0014723055005172211, 0.0014704313317110852, 0.001456502794549155, 0.0014326452589086256, 0.0014214682069528554, 0.0014046956249525817, 0.001403877012216969, 0.0013797483633231815, 0.0013744764616914736, 0.0013571615432073874, 0.0013392250671205026, 0.0013058057139738962, 0.001272815459978829, 0.0012676021596737894, 0.0012476709843229667, 0.0012446237078276607, 0.001221150768624057, 0.0012160251801623802, 0.0012045045393699384, 0.0011811840517493791, 0.0011754168871983973, 0.0011504433439487472, 0.0011471099961894344, 0.0011318836412608619, 0.0011249793725380318, 0.0011228028886012997, 0.0010967205415592536, 0.0010633610442995205, 0.0010601417846554239, 0.0010595647048445623, 0.0010373318608579507, 0.0010165845202312564, 0.0010068631792106385, 0.0009916183156419502, 0.000979431759120121, 0.00097311173336498, 0.0009504640211467061, 0.0009359896822648053, 0.0009268765155118416, 0.0009011006594813297, 0.0008810641457538038, 0.0008287835267201029, 0.0008004055546476585, 0.00079887960621856, 0.0007753159705004893, 0.0007750207318172756, 0.0007594709251362326, 0.000752114134210969, 0.0007235525500581843, 0.0007179811056179639, 0.0007117410772554228, 0.000706368125973567, 0.0006703755646302447, 0.0006598925686841667, 0.0006558813475131488, 0.000643763964321869, 0.0006382666752393083, 0.0006252735512958683, 0.0006206676236749231, 0.0005888456137181917, 0.000588010841772319, 0.0005331247980914262, 0.0004877276937383837, 0.0004853706668751739, 0.0004828883042669557, 0.0004809796548429756, 0.00046325648162030364, 0.0004560500136275299, 0.00045415774378416523, 0.00043993598141300346, 0.00043710151264888186, 0.00043575634910336626, 0.00042492563491766623, 0.00042310223378249614, 0.00041418539720749196, 0.0004029197886050972, 0.0003919136151607198, 0.0003863166464763007, 0.00037791258594805223, 0.00036187993078661977, 0.00035048949568092735, 0.00034813765493396334, 0.0003441897804075586, 0.00031705393574343085, 0.00031574770791495215, 0.00027660734729064915, 0.0002755442768422471, 0.0002755158719727706, 0.00027451105507324877, 0.0002678806092422077, 0.00024430712626944795, 0.00022903793087760741, 0.00021815507267131128, 0.00021198787484556138, 0.00020956970675301082, 0.00020940610823095537, 0.00020766105732903073, 0.00020640407879436674, 0.00020613413778984671, 0.0002061341377898467, 0.0002061341377898467, 0.0001603265516143252, 0.0001488746550704448, 0.00014711282483292475, 0.00014353043668330077, 0.0001386664891301358, 0.00013817782862835876, 0.00013810138943286804, 0.00013807197227343358, 0.00013805701741207162, 0.00013742275852656448, 0.00013742275852656448, 0.00013742275852656445, 0.00013742275852656445, 0.00013742275852656445, 0.00013742275852656445, 9.161517235104297e-05, 7.198334970439088e-05, 7.116535709411373e-05, 7.116535709411373e-05, 7.062002868726235e-05, 6.985656891767022e-05, 6.92285616878441e-05, 6.896033353597529e-05, 6.871137926328225e-05, 6.871137926328224e-05, 6.871137926328224e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328222e-05, 6.871137926328221e-05, 3.435568963164112e-05, 1.145189654388038e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MGTw1UuinYj_",
        "colab_type": "code",
        "outputId": "75724cbc-e6db-49d0-878a-21904a221acf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "#_df.dtypes\n",
        "#array[x_df[['MSSubClass','LotArea']].values]\n",
        "#array[x_df]\n",
        "\n",
        "tt=x_df[['MSSubClass','LotArea']].astype('int')\n",
        "tt.dtypes"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MSSubClass    int64\n",
              "LotArea       int64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PUY_Abgzemli",
        "colab_type": "code",
        "outputId": "70238bab-7544-4a53-a053-4fa49f6f1d5a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "from sklearn.preprocessing import Imputer\n",
        "imputer = Imputer(missing_values='NaN',strategy='mean',axis=0)  \n",
        "df_with_dummies = imputer.fit_transform(df_with_dummies)\n",
        "df_with_dummies = pd.DataFrame(df_with_dummies)\n",
        " #df_with_dummies = imputer.fit\n",
        " #df_with_dummies.transform\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:66: DeprecationWarning: Class Imputer is deprecated; Imputer was deprecated in version 0.20 and will be removed in 0.22. Import impute.SimpleImputer from sklearn instead.\n",
            "  warnings.warn(msg, category=DeprecationWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MMn06yVqljZI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f7y4pmXahism",
        "colab_type": "code",
        "outputId": "24ef64fc-aca0-4155-e974-8ca2923fc0e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#array[:,306:307]\n",
        "array[:,307]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0., 0., ..., 0., 0., 0.])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1drKhGd-h1-6",
        "colab_type": "code",
        "outputId": "12f08468-899f-45a6-95f5-48441ef8c923",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        }
      },
      "source": [
        "df_with_dummies.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>10</th>\n",
              "      <th>11</th>\n",
              "      <th>12</th>\n",
              "      <th>13</th>\n",
              "      <th>14</th>\n",
              "      <th>15</th>\n",
              "      <th>16</th>\n",
              "      <th>17</th>\n",
              "      <th>18</th>\n",
              "      <th>19</th>\n",
              "      <th>20</th>\n",
              "      <th>21</th>\n",
              "      <th>22</th>\n",
              "      <th>23</th>\n",
              "      <th>24</th>\n",
              "      <th>25</th>\n",
              "      <th>26</th>\n",
              "      <th>27</th>\n",
              "      <th>28</th>\n",
              "      <th>29</th>\n",
              "      <th>30</th>\n",
              "      <th>31</th>\n",
              "      <th>32</th>\n",
              "      <th>33</th>\n",
              "      <th>34</th>\n",
              "      <th>35</th>\n",
              "      <th>36</th>\n",
              "      <th>37</th>\n",
              "      <th>38</th>\n",
              "      <th>39</th>\n",
              "      <th>...</th>\n",
              "      <th>268</th>\n",
              "      <th>269</th>\n",
              "      <th>270</th>\n",
              "      <th>271</th>\n",
              "      <th>272</th>\n",
              "      <th>273</th>\n",
              "      <th>274</th>\n",
              "      <th>275</th>\n",
              "      <th>276</th>\n",
              "      <th>277</th>\n",
              "      <th>278</th>\n",
              "      <th>279</th>\n",
              "      <th>280</th>\n",
              "      <th>281</th>\n",
              "      <th>282</th>\n",
              "      <th>283</th>\n",
              "      <th>284</th>\n",
              "      <th>285</th>\n",
              "      <th>286</th>\n",
              "      <th>287</th>\n",
              "      <th>288</th>\n",
              "      <th>289</th>\n",
              "      <th>290</th>\n",
              "      <th>291</th>\n",
              "      <th>292</th>\n",
              "      <th>293</th>\n",
              "      <th>294</th>\n",
              "      <th>295</th>\n",
              "      <th>296</th>\n",
              "      <th>297</th>\n",
              "      <th>298</th>\n",
              "      <th>299</th>\n",
              "      <th>300</th>\n",
              "      <th>301</th>\n",
              "      <th>302</th>\n",
              "      <th>303</th>\n",
              "      <th>304</th>\n",
              "      <th>305</th>\n",
              "      <th>306</th>\n",
              "      <th>307</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>8450.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>196.0</td>\n",
              "      <td>706.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>856.0</td>\n",
              "      <td>856.0</td>\n",
              "      <td>854.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1710.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>548.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>208500.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9600.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>978.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>284.0</td>\n",
              "      <td>1262.0</td>\n",
              "      <td>1262.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1262.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>460.0</td>\n",
              "      <td>298.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2007.0</td>\n",
              "      <td>181500.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>11250.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>2002.0</td>\n",
              "      <td>162.0</td>\n",
              "      <td>486.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>434.0</td>\n",
              "      <td>920.0</td>\n",
              "      <td>920.0</td>\n",
              "      <td>866.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1786.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>608.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>223500.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>9550.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1915.0</td>\n",
              "      <td>1970.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>216.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>540.0</td>\n",
              "      <td>756.0</td>\n",
              "      <td>961.0</td>\n",
              "      <td>756.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1717.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1998.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>642.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>35.0</td>\n",
              "      <td>272.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2006.0</td>\n",
              "      <td>140000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>14260.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>350.0</td>\n",
              "      <td>655.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>490.0</td>\n",
              "      <td>1145.0</td>\n",
              "      <td>1145.0</td>\n",
              "      <td>1053.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2198.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>836.0</td>\n",
              "      <td>192.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2008.0</td>\n",
              "      <td>250000.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 308 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   0     1     2        3    4    5    ...  302  303  304  305  306  307\n",
              "0  1.0  60.0  65.0   8450.0  7.0  5.0  ...  0.0  0.0  0.0  0.0  1.0  0.0\n",
              "1  2.0  20.0  80.0   9600.0  6.0  8.0  ...  0.0  0.0  0.0  0.0  1.0  0.0\n",
              "2  3.0  60.0  68.0  11250.0  7.0  5.0  ...  0.0  0.0  0.0  0.0  1.0  0.0\n",
              "3  4.0  70.0  60.0   9550.0  7.0  5.0  ...  1.0  0.0  0.0  0.0  0.0  0.0\n",
              "4  5.0  60.0  84.0  14260.0  8.0  5.0  ...  0.0  0.0  0.0  0.0  1.0  0.0\n",
              "\n",
              "[5 rows x 308 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JjwtbgMhgwMO",
        "colab_type": "code",
        "outputId": "cac5010d-502b-4021-b4e0-79a23abeb8a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "df_with_dummies.values[:,0:308]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.000e+00, 6.000e+01, 6.500e+01, ..., 0.000e+00, 1.000e+00,\n",
              "        0.000e+00],\n",
              "       [2.000e+00, 2.000e+01, 8.000e+01, ..., 0.000e+00, 1.000e+00,\n",
              "        0.000e+00],\n",
              "       [3.000e+00, 6.000e+01, 6.800e+01, ..., 0.000e+00, 1.000e+00,\n",
              "        0.000e+00],\n",
              "       ...,\n",
              "       [1.458e+03, 7.000e+01, 6.600e+01, ..., 0.000e+00, 1.000e+00,\n",
              "        0.000e+00],\n",
              "       [1.459e+03, 2.000e+01, 6.800e+01, ..., 0.000e+00, 1.000e+00,\n",
              "        0.000e+00],\n",
              "       [1.460e+03, 2.000e+01, 7.500e+01, ..., 0.000e+00, 1.000e+00,\n",
              "        0.000e+00]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-w4p9zR_fZ5Z",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pd.DataFrame(df_with_dummies).isnull().sum()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P_2ylYHnpdXH",
        "colab_type": "code",
        "outputId": "9972c979-28e6-455d-9c4f-e117d8417a80",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        }
      },
      "source": [
        "df2.groupby(['BsmtExposure','BsmtQual'])['BsmtExposure'].count()\n",
        "\n",
        "#gg=df2[(df2['BsmtQual']=='Gd')][['BsmtExposure','BsmtQual']]\n",
        "#gg.groupby(['BsmtExposure','BsmtQual'])['BsmtExposure'].count()\n",
        "#df2[(df2['BsmtQual']=='Gd') & (df2['BsmtExposure'].isnull())][['BsmtExposure','BsmtQual']]\n",
        "\n",
        "#dd=df2.loc[index[948]:]\n",
        "#df = df.loc[index[0]:]\n",
        "#df2"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BsmtExposure  BsmtQual\n",
              "Av            Ex           35\n",
              "              Gd          135\n",
              "              TA           51\n",
              "Gd            Ex           34\n",
              "              Fa            1\n",
              "              Gd           69\n",
              "              TA           30\n",
              "Mn            Ex            9\n",
              "              Fa            5\n",
              "              Gd           54\n",
              "              TA           46\n",
              "NA            Gd            1\n",
              "No            Ex           43\n",
              "              Fa           29\n",
              "              Gd          359\n",
              "              TA          522\n",
              "Name: BsmtExposure, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "G9w2sGHuOazk",
        "colab": {}
      },
      "source": [
        "df3 = df2[['MSSubClass','LotFrontage','LotArea','OverallQual','OverallCond','YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF']]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "scvPVsUKM9RN",
        "colab_type": "code",
        "outputId": "df758ba1-8a4d-4a2c-fd6b-fcf900ca69c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "tt.fit"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "IterativeImputer(add_indicator=False, estimator=None,\n",
              "                 imputation_order='ascending', initial_strategy='mean',\n",
              "                 max_iter=10, max_value=None, min_value=None,\n",
              "                 missing_values=nan, n_nearest_features=None, random_state=0,\n",
              "                 sample_posterior=False, tol=0.001, verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8C24_w2QNCyD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df4 = df3[['MSSubClass','LotFrontage','LotArea','OverallQual','OverallCond','YearBuilt','YearRemodAdd','MasVnrArea','BsmtFinSF1','BsmtUnfSF','TotalBsmtSF','1stFlrSF','2ndFlrSF']]\n",
        "   "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "PpDQWSE7OaGU",
        "colab": {}
      },
      "source": [
        "df5=df4[df4['LotFrontage'].isnull()]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JcUwKC5HS4N9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#X_test = [[np.nan, 2], [6, np.nan], [np.nan, 6]]\n",
        "# the model learns that the second feature is double the first\n",
        "df6= pd.DataFrame(tt.transform(df5))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l1FfSJ7iog0z",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2.isnull().sum()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aAf4XfwKQbU_",
        "colab_type": "code",
        "outputId": "df2255eb-504c-435f-c828-3ccf09df8e6c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        }
      },
      "source": [
        "from pandas import read_csv\n",
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "# load data\n",
        "#url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\n",
        "#names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\n",
        "#dataframe = read_csv(url, names=names)\n",
        "\n",
        "x_df = df_with_dummies.drop(37,axis=1)\n",
        "#x_full = df2.drop(37,axis=1)\n",
        "y_df = df_with_dummies[37]\n",
        "\n",
        "#array = df_with_dummies.values\n",
        "X = array[x_df.values]\n",
        "Y = array[y_df.values]\n",
        "# feature extraction\n",
        "model = ExtraTreesClassifier()\n",
        "model.fit(X, Y)\n",
        "print(model.feature_importances_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-132-12f28d372dde>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m#array = df_with_dummies.values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# feature extraction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: arrays used as indices must be of integer (or boolean) type"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wjz5DYnfQhiT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_df.dtypes"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "070fE-rPQ8za",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "ct_cols =['MSZoning','Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','LandSlope','Condition1','Condition2','BldgType','HouseStyle',\n",
        "'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','Neighborhood','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical',\n",
        "'KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition']\n",
        "df3 = df2\n",
        "\n",
        "#cols_to_transform = [ 'a', 'list', 'of', 'categorical', 'column', 'names' ]\n",
        "df_with_dummies = pd.get_dummies(df3, columns = ct_cols)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dQn9RzNIUYe-",
        "colab_type": "code",
        "outputId": "0b162d34-7055-436b-a27c-9e32973ad69d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        }
      },
      "source": [
        "df_with_dummies.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>OverallQual</th>\n",
              "      <th>OverallCond</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>YearRemodAdd</th>\n",
              "      <th>MasVnrArea</th>\n",
              "      <th>BsmtFinSF1</th>\n",
              "      <th>BsmtFinSF2</th>\n",
              "      <th>BsmtUnfSF</th>\n",
              "      <th>TotalBsmtSF</th>\n",
              "      <th>1stFlrSF</th>\n",
              "      <th>2ndFlrSF</th>\n",
              "      <th>LowQualFinSF</th>\n",
              "      <th>GrLivArea</th>\n",
              "      <th>BsmtFullBath</th>\n",
              "      <th>BsmtHalfBath</th>\n",
              "      <th>FullBath</th>\n",
              "      <th>HalfBath</th>\n",
              "      <th>BedroomAbvGr</th>\n",
              "      <th>KitchenAbvGr</th>\n",
              "      <th>TotRmsAbvGrd</th>\n",
              "      <th>Fireplaces</th>\n",
              "      <th>GarageYrBlt</th>\n",
              "      <th>GarageCars</th>\n",
              "      <th>GarageArea</th>\n",
              "      <th>WoodDeckSF</th>\n",
              "      <th>OpenPorchSF</th>\n",
              "      <th>EnclosedPorch</th>\n",
              "      <th>3SsnPorch</th>\n",
              "      <th>ScreenPorch</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SalePrice</th>\n",
              "      <th>MSZoning_C (all)</th>\n",
              "      <th>MSZoning_FV</th>\n",
              "      <th>...</th>\n",
              "      <th>GarageQual_Po</th>\n",
              "      <th>GarageQual_TA</th>\n",
              "      <th>GarageCond_Ex</th>\n",
              "      <th>GarageCond_Fa</th>\n",
              "      <th>GarageCond_Gd</th>\n",
              "      <th>GarageCond_NA</th>\n",
              "      <th>GarageCond_Po</th>\n",
              "      <th>GarageCond_TA</th>\n",
              "      <th>PavedDrive_N</th>\n",
              "      <th>PavedDrive_P</th>\n",
              "      <th>PavedDrive_Y</th>\n",
              "      <th>PoolQC_Ex</th>\n",
              "      <th>PoolQC_Fa</th>\n",
              "      <th>PoolQC_Gd</th>\n",
              "      <th>PoolQC_NA</th>\n",
              "      <th>Fence_GdPrv</th>\n",
              "      <th>Fence_GdWo</th>\n",
              "      <th>Fence_MnPrv</th>\n",
              "      <th>Fence_MnWw</th>\n",
              "      <th>Fence_NA</th>\n",
              "      <th>MiscFeature_Gar2</th>\n",
              "      <th>MiscFeature_NA</th>\n",
              "      <th>MiscFeature_Othr</th>\n",
              "      <th>MiscFeature_Shed</th>\n",
              "      <th>MiscFeature_TenC</th>\n",
              "      <th>SaleType_COD</th>\n",
              "      <th>SaleType_CWD</th>\n",
              "      <th>SaleType_Con</th>\n",
              "      <th>SaleType_ConLD</th>\n",
              "      <th>SaleType_ConLI</th>\n",
              "      <th>SaleType_ConLw</th>\n",
              "      <th>SaleType_New</th>\n",
              "      <th>SaleType_Oth</th>\n",
              "      <th>SaleType_WD</th>\n",
              "      <th>SaleCondition_Abnorml</th>\n",
              "      <th>SaleCondition_AdjLand</th>\n",
              "      <th>SaleCondition_Alloca</th>\n",
              "      <th>SaleCondition_Family</th>\n",
              "      <th>SaleCondition_Normal</th>\n",
              "      <th>SaleCondition_Partial</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>60</td>\n",
              "      <td>65.0</td>\n",
              "      <td>8450</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2003</td>\n",
              "      <td>2003</td>\n",
              "      <td>196.0</td>\n",
              "      <td>706</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>856</td>\n",
              "      <td>856</td>\n",
              "      <td>854</td>\n",
              "      <td>0</td>\n",
              "      <td>1710</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>2</td>\n",
              "      <td>548</td>\n",
              "      <td>0</td>\n",
              "      <td>61</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2008</td>\n",
              "      <td>208500</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9600</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>1976</td>\n",
              "      <td>1976</td>\n",
              "      <td>0.0</td>\n",
              "      <td>978</td>\n",
              "      <td>0</td>\n",
              "      <td>284</td>\n",
              "      <td>1262</td>\n",
              "      <td>1262</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1262</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>2</td>\n",
              "      <td>460</td>\n",
              "      <td>298</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2007</td>\n",
              "      <td>181500</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>60</td>\n",
              "      <td>68.0</td>\n",
              "      <td>11250</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2001</td>\n",
              "      <td>2002</td>\n",
              "      <td>162.0</td>\n",
              "      <td>486</td>\n",
              "      <td>0</td>\n",
              "      <td>434</td>\n",
              "      <td>920</td>\n",
              "      <td>920</td>\n",
              "      <td>866</td>\n",
              "      <td>0</td>\n",
              "      <td>1786</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>2</td>\n",
              "      <td>608</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>2008</td>\n",
              "      <td>223500</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>70</td>\n",
              "      <td>60.0</td>\n",
              "      <td>9550</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>1915</td>\n",
              "      <td>1970</td>\n",
              "      <td>0.0</td>\n",
              "      <td>216</td>\n",
              "      <td>0</td>\n",
              "      <td>540</td>\n",
              "      <td>756</td>\n",
              "      <td>961</td>\n",
              "      <td>756</td>\n",
              "      <td>0</td>\n",
              "      <td>1717</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>1998.0</td>\n",
              "      <td>3</td>\n",
              "      <td>642</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2006</td>\n",
              "      <td>140000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "      <td>84.0</td>\n",
              "      <td>14260</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2000</td>\n",
              "      <td>2000</td>\n",
              "      <td>350.0</td>\n",
              "      <td>655</td>\n",
              "      <td>0</td>\n",
              "      <td>490</td>\n",
              "      <td>1145</td>\n",
              "      <td>1145</td>\n",
              "      <td>1053</td>\n",
              "      <td>0</td>\n",
              "      <td>2198</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>836</td>\n",
              "      <td>192</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>2008</td>\n",
              "      <td>250000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 308 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   Id  MSSubClass  ...  SaleCondition_Normal  SaleCondition_Partial\n",
              "0   1          60  ...                     1                      0\n",
              "1   2          20  ...                     1                      0\n",
              "2   3          60  ...                     1                      0\n",
              "3   4          70  ...                     0                      0\n",
              "4   5          60  ...                     1                      0\n",
              "\n",
              "[5 rows x 308 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mV81Bejmw2h3",
        "colab_type": "code",
        "outputId": "0f067199-470b-41f2-e536-abea31d8d65f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        }
      },
      "source": [
        "df_with_dummies.dtypes[[df_with_dummies.dtypes != 'int64'],[df_with_dummies.dtypes != 'uint8']]\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-58-9a3f81f39eb4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_with_dummies\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_with_dummies\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'int64'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf_with_dummies\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtypes\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'uint8'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    909\u001b[0m             \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_bool_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    910\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 911\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    912\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    913\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_with\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    921\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    922\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 923\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    924\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_values_tuple\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    966\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMultiIndex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 968\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Can only tuple-index with a MultiIndex'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    969\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    970\u001b[0m         \u001b[0;31m# If key is contained, would have returned by now\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Can only tuple-index with a MultiIndex"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h95hqXtmx3me",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "dd[:40]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P4rO3WjWx_At",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# explicitly require this experimental feature\n",
        "from sklearn.experimental import enable_iterative_imputer  # noqa\n",
        "# now you can import normally from sklearn.impute\n",
        "from sklearn.impute import IterativeImputer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lHPCw9TjtgKm",
        "colab_type": "code",
        "outputId": "f4ae9873-b262-4079-cb61-e4ef2c30492a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        }
      },
      "source": [
        "df2[df2['GarageYrBlt'].isnull()][['GarageType','GarageYrBlt']]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GarageType</th>\n",
              "      <th>GarageYrBlt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [GarageType, GarageYrBlt]\n",
              "Index: []"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q2n4LlEDxJpB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2.isnull().sum()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zrOs00PwxPXQ",
        "colab_type": "code",
        "outputId": "920ef3b4-7e03-4ec6-ce31-714e291300fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        }
      },
      "source": [
        "print(__doc__)\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# To use this experimental feature, we need to explicitly ask for it:\n",
        "from sklearn.experimental import enable_iterative_imputer  # noqa\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "from sklearn.linear_model import BayesianRidge\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import ExtraTreesRegressor\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "N_SPLITS = 5\n",
        "\n",
        "rng = np.random.RandomState(0)\n",
        "\n",
        "#X_full, y_full = fetch_california_housing(return_X_y=True)\n",
        "# ~2k samples is enough for the purpose of the example.\n",
        "# Remove the following two lines for a slower run with different error bars.\n",
        "#X_full = X_full[::10]\n",
        "#y_full = y_full[::10]\n",
        "\n",
        "#print(df_with_dummies)\n",
        "x_full_temp = df_with_dummies[(df_with_dummies['LotFrontage'].notnull()) & (df_with_dummies['MasVnrArea'].notnull())]\n",
        "X_full = x_full_temp.drop('SalePrice',axis=1)\n",
        "\n",
        "y_full =x_full_temp['SalePrice']\n",
        "#_full, y_full = fetch_california_housing(return_X_y=True)\n",
        "n_samples, n_features = X_full.shape\n",
        "\n",
        "# Estimate the score on the entire dataset, with no missing values\n",
        "br_estimator = BayesianRidge()\n",
        "score_full_data = pd.DataFrame(\n",
        "    cross_val_score(\n",
        "        br_estimator, X_full, y_full, scoring='neg_mean_squared_error',\n",
        "        cv=N_SPLITS\n",
        "    ),\n",
        "    columns=['Full Data']\n",
        ")\n",
        "\n",
        "# Add a single missing value to each row\n",
        "#X_missing = X_full.copy()\n",
        "#y_missing = y_full\n",
        "#missing_samples = np.arange(n_samples)\n",
        "#missing_features = rng.choice(n_features, n_samples, replace=True)\n",
        "#print(X_missing)\n",
        "#print(missing_samples)\n",
        "#print(missing_features)\n",
        "#X_missing[missing_samples, missing_features] = np.nan\n",
        "\n",
        "X_missing_temp = df_with_dummies[(df_with_dummies['LotFrontage'].isnull()) | (df_with_dummies['MasVnrArea'].isnull())]\n",
        "X_missing = X_missing_temp.drop('SalePrice',axis=1)\n",
        "\n",
        "y_missing =X_missing_temp['SalePrice']\n",
        "\n",
        "\n",
        "# Estimate the score after imputation (mean and median strategies)\n",
        "score_simple_imputer = pd.DataFrame()\n",
        "for strategy in ('mean', 'median'):\n",
        "    estimator = make_pipeline(\n",
        "        SimpleImputer(missing_values=np.nan, strategy=strategy),\n",
        "        br_estimator\n",
        "    )\n",
        "    score_simple_imputer[strategy] = cross_val_score(\n",
        "        estimator, X_missing, y_missing, scoring='neg_mean_squared_error',\n",
        "        cv=N_SPLITS\n",
        "    )\n",
        "\n",
        "# Estimate the score after iterative imputation of the missing values\n",
        "# with different estimators\n",
        "estimators = [\n",
        "    BayesianRidge(),\n",
        "    DecisionTreeRegressor(max_features='sqrt', random_state=0),\n",
        "    ExtraTreesRegressor(n_estimators=10, random_state=0),\n",
        "    KNeighborsRegressor(n_neighbors=3)\n",
        "]\n",
        "score_iterative_imputer = pd.DataFrame()\n",
        "for impute_estimator in estimators:\n",
        "    estimator = make_pipeline(\n",
        "        IterativeImputer(random_state=0, estimator=impute_estimator),\n",
        "        br_estimator\n",
        "    )\n",
        "    score_iterative_imputer[impute_estimator.__class__.__name__] = \\\n",
        "        cross_val_score(\n",
        "            estimator, X_missing, y_missing, scoring='neg_mean_squared_error',\n",
        "            cv=N_SPLITS\n",
        "        )\n",
        "\n",
        "scores = pd.concat(\n",
        "    [score_full_data, score_simple_imputer, score_iterative_imputer],\n",
        "    keys=['Original', 'SimpleImputer', 'IterativeImputer'], axis=1\n",
        ")\n",
        "\n",
        "# plot boston results\n",
        "fig, ax = plt.subplots(figsize=(13, 6))\n",
        "means = -scores.mean()\n",
        "errors = scores.std()\n",
        "means.plot.barh(xerr=errors, ax=ax)\n",
        "ax.set_title('California Housing Regression with Different Imputation Methods')\n",
        "ax.set_xlabel('MSE (smaller is better)')\n",
        "ax.set_yticks(np.arange(means.shape[0]))\n",
        "ax.set_yticklabels([\" w/ \".join(label) for label in means.index.get_values()])\n",
        "plt.tight_layout(pad=1)\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Automatically created module for IPython interactive environment\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 936x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L0ybrLR8iNGg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y_missing"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TdxsmIOTyzh_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_full = df2.drop('SalePrice',axis=1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oePUrtpLy4Dg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "xxx.isnull().sum()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1m40m5JH6i8q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "xxx=x_full[(x_full['LotFrontage'].notnull()) & (x_full['MasVnrArea'].notnull())]\n",
        "       #df.loc[(df.a != 1) | (df.b < 5)]\n",
        "  #xtrain = df[df['survive'].notnull()][['Age','Fare', 'Group_Size','deck', 'Pclass', 'Title' ]]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q6oj8aJ0zABQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_with_dummies.isnull().sum()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gCaQaCfCzwEH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_with_dummies.dtypes"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aGFyJVF30zle",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df2.groupby('GarageYrBlt')['GarageYrBlt'].count()\n",
        "#df2.groupby(['BsmtExposure','BsmtQual'])['BsmtExposure'].count()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tAd_qEfv1jNu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print(__doc__)\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# To use this experimental feature, we need to explicitly ask for it:\n",
        "from sklearn.experimental import enable_iterative_imputer  # noqa\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "from sklearn.linear_model import BayesianRidge\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import ExtraTreesRegressor\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "N_SPLITS = 5\n",
        "\n",
        "rng = np.random.RandomState(0)\n",
        "\n",
        "X_full, y_full = fetch_california_housing(return_X_y=True)\n",
        "# ~2k samples is enough for the purpose of the example.\n",
        "# Remove the following two lines for a slower run with different error bars.\n",
        "X_full = X_full[::10]\n",
        "y_full = y_full[::10]\n",
        "n_samples, n_features = X_full.shape\n",
        "\n",
        "# Estimate the score on the entire dataset, with no missing values\n",
        "br_estimator = BayesianRidge()\n",
        "score_full_data = pd.DataFrame(\n",
        "    cross_val_score(\n",
        "        br_estimator, X_full, y_full, scoring='neg_mean_squared_error',\n",
        "        cv=N_SPLITS\n",
        "    ),\n",
        "    columns=['Full Data']\n",
        ")\n",
        "\n",
        "# Add a single missing value to each row\n",
        "X_missing = X_full.copy()\n",
        "y_missing = y_full\n",
        "missing_samples = np.arange(n_samples)\n",
        "missing_features = rng.choice(n_features, n_samples, replace=True)\n",
        "X_missing[missing_samples, missing_features] = np.nan\n",
        "\n",
        "# Estimate the score after imputation (mean and median strategies)\n",
        "score_simple_imputer = pd.DataFrame()\n",
        "for strategy in ('mean', 'median'):\n",
        "    estimator = make_pipeline(\n",
        "        SimpleImputer(missing_values=np.nan, strategy=strategy),\n",
        "        br_estimator\n",
        "    )\n",
        "    score_simple_imputer[strategy] = cross_val_score(\n",
        "        estimator, X_missing, y_missing, scoring='neg_mean_squared_error',\n",
        "        cv=N_SPLITS\n",
        "    )\n",
        "\n",
        "# Estimate the score after iterative imputation of the missing values\n",
        "# with different estimators\n",
        "estimators = [\n",
        "    BayesianRidge(),\n",
        "    DecisionTreeRegressor(max_features='sqrt', random_state=0),\n",
        "    ExtraTreesRegressor(n_estimators=10, random_state=0),\n",
        "    KNeighborsRegressor(n_neighbors=15)\n",
        "]\n",
        "score_iterative_imputer = pd.DataFrame()\n",
        "for impute_estimator in estimators:\n",
        "    estimator = make_pipeline(\n",
        "        IterativeImputer(random_state=0, estimator=impute_estimator),\n",
        "        br_estimator\n",
        "    )\n",
        "    score_iterative_imputer[impute_estimator.__class__.__name__] = \\\n",
        "        cross_val_score(\n",
        "            estimator, X_missing, y_missing, scoring='neg_mean_squared_error',\n",
        "            cv=N_SPLITS\n",
        "        )\n",
        "\n",
        "scores = pd.concat(\n",
        "    [score_full_data, score_simple_imputer, score_iterative_imputer],\n",
        "    keys=['Original', 'SimpleImputer', 'IterativeImputer'], axis=1\n",
        ")\n",
        "\n",
        "# plot boston results\n",
        "fig, ax = plt.subplots(figsize=(13, 6))\n",
        "means = -scores.mean()\n",
        "errors = scores.std()\n",
        "means.plot.barh(xerr=errors, ax=ax)\n",
        "ax.set_title('California Housing Regression with Different Imputation Methods')\n",
        "ax.set_xlabel('MSE (smaller is better)')\n",
        "ax.set_yticks(np.arange(means.shape[0]))\n",
        "ax.set_yticklabels([\" w/ \".join(label) for label in means.index.get_values()])\n",
        "plt.tight_layout(pad=1)\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JRof6CCz6HuC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "missing_samples = np.arange(1200)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zem314h4Irb3",
        "colab_type": "code",
        "outputId": "761225aa-9862-4467-e6fd-74412c6bdfb1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "missing_samples"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([   0,    1,    2, ..., 1197, 1198, 1199])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8rtq5_emItCf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df_with_dummies[(df_with_dummies['LotFrontage'].isnull()) | (df_with_dummies['MasVnrArea'].isnull())]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q02gcAGBLvMS",
        "colab_type": "code",
        "outputId": "96d8b1a6-cd90-452a-810a-df3de1a83f12",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "from pandas import read_csv\n",
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "# load data\n",
        "url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\n",
        "names = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\n",
        "dataframe = read_csv(url, names=names)\n",
        "array = dataframe.values\n",
        "X = array[:,0:8]\n",
        "Y = array[:,8]\n",
        "# feature extraction\n",
        "model = ExtraTreesClassifier()\n",
        "model.fit(X, Y)\n",
        "print(model.feature_importances_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.12026308 0.21545286 0.09287062 0.07876944 0.07655606 0.15365576\n",
            " 0.11590744 0.14652475]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
            "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VF5llGNRrKBV",
        "colab_type": "code",
        "outputId": "bd8bc325-8b1e-4222-ec77-eca9cb517c59",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        }
      },
      "source": [
        "X"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  6.   , 148.   ,  72.   , ...,  33.6  ,   0.627,  50.   ],\n",
              "       [  1.   ,  85.   ,  66.   , ...,  26.6  ,   0.351,  31.   ],\n",
              "       [  8.   , 183.   ,  64.   , ...,  23.3  ,   0.672,  32.   ],\n",
              "       ...,\n",
              "       [  5.   , 121.   ,  72.   , ...,  26.2  ,   0.245,  30.   ],\n",
              "       [  1.   , 126.   ,  60.   , ...,  30.1  ,   0.349,  47.   ],\n",
              "       [  1.   ,  93.   ,  70.   , ...,  30.4  ,   0.315,  23.   ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hp7ynzUlrLl2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "outputId": "2187a945-8207-4413-8b14-8455b53cfe97"
      },
      "source": [
        "df2.describe()"
      ],
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>OverallQual</th>\n",
              "      <th>OverallCond</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>YearRemodAdd</th>\n",
              "      <th>MasVnrArea</th>\n",
              "      <th>BsmtFinSF1</th>\n",
              "      <th>BsmtFinSF2</th>\n",
              "      <th>BsmtUnfSF</th>\n",
              "      <th>TotalBsmtSF</th>\n",
              "      <th>1stFlrSF</th>\n",
              "      <th>2ndFlrSF</th>\n",
              "      <th>LowQualFinSF</th>\n",
              "      <th>GrLivArea</th>\n",
              "      <th>BsmtFullBath</th>\n",
              "      <th>BsmtHalfBath</th>\n",
              "      <th>FullBath</th>\n",
              "      <th>HalfBath</th>\n",
              "      <th>BedroomAbvGr</th>\n",
              "      <th>KitchenAbvGr</th>\n",
              "      <th>TotRmsAbvGrd</th>\n",
              "      <th>Fireplaces</th>\n",
              "      <th>GarageYrBlt</th>\n",
              "      <th>GarageCars</th>\n",
              "      <th>GarageArea</th>\n",
              "      <th>WoodDeckSF</th>\n",
              "      <th>OpenPorchSF</th>\n",
              "      <th>EnclosedPorch</th>\n",
              "      <th>3SsnPorch</th>\n",
              "      <th>ScreenPorch</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1201.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1452.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "      <td>1460.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>730.500000</td>\n",
              "      <td>56.897260</td>\n",
              "      <td>70.049958</td>\n",
              "      <td>10516.828082</td>\n",
              "      <td>6.099315</td>\n",
              "      <td>5.575342</td>\n",
              "      <td>1971.267808</td>\n",
              "      <td>1984.865753</td>\n",
              "      <td>103.685262</td>\n",
              "      <td>443.639726</td>\n",
              "      <td>46.549315</td>\n",
              "      <td>567.240411</td>\n",
              "      <td>1057.429452</td>\n",
              "      <td>1162.626712</td>\n",
              "      <td>346.992466</td>\n",
              "      <td>5.844521</td>\n",
              "      <td>1515.463699</td>\n",
              "      <td>0.425342</td>\n",
              "      <td>0.057534</td>\n",
              "      <td>1.565068</td>\n",
              "      <td>0.382877</td>\n",
              "      <td>2.866438</td>\n",
              "      <td>1.046575</td>\n",
              "      <td>6.517808</td>\n",
              "      <td>0.613014</td>\n",
              "      <td>1868.739726</td>\n",
              "      <td>1.767123</td>\n",
              "      <td>472.980137</td>\n",
              "      <td>94.244521</td>\n",
              "      <td>46.660274</td>\n",
              "      <td>21.954110</td>\n",
              "      <td>3.409589</td>\n",
              "      <td>15.060959</td>\n",
              "      <td>2.758904</td>\n",
              "      <td>43.489041</td>\n",
              "      <td>6.321918</td>\n",
              "      <td>2007.815753</td>\n",
              "      <td>180921.195890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>421.610009</td>\n",
              "      <td>42.300571</td>\n",
              "      <td>24.284752</td>\n",
              "      <td>9981.264932</td>\n",
              "      <td>1.382997</td>\n",
              "      <td>1.112799</td>\n",
              "      <td>30.202904</td>\n",
              "      <td>20.645407</td>\n",
              "      <td>181.066207</td>\n",
              "      <td>456.098091</td>\n",
              "      <td>161.319273</td>\n",
              "      <td>441.866955</td>\n",
              "      <td>438.705324</td>\n",
              "      <td>386.587738</td>\n",
              "      <td>436.528436</td>\n",
              "      <td>48.623081</td>\n",
              "      <td>525.480383</td>\n",
              "      <td>0.518911</td>\n",
              "      <td>0.238753</td>\n",
              "      <td>0.550916</td>\n",
              "      <td>0.502885</td>\n",
              "      <td>0.815778</td>\n",
              "      <td>0.220338</td>\n",
              "      <td>1.625393</td>\n",
              "      <td>0.644666</td>\n",
              "      <td>453.697295</td>\n",
              "      <td>0.747315</td>\n",
              "      <td>213.804841</td>\n",
              "      <td>125.338794</td>\n",
              "      <td>66.256028</td>\n",
              "      <td>61.119149</td>\n",
              "      <td>29.317331</td>\n",
              "      <td>55.757415</td>\n",
              "      <td>40.177307</td>\n",
              "      <td>496.123024</td>\n",
              "      <td>2.703626</td>\n",
              "      <td>1.328095</td>\n",
              "      <td>79442.502883</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>1300.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1872.000000</td>\n",
              "      <td>1950.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>334.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>334.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2006.000000</td>\n",
              "      <td>34900.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>365.750000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>7553.500000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1954.000000</td>\n",
              "      <td>1967.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>223.000000</td>\n",
              "      <td>795.750000</td>\n",
              "      <td>882.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1129.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1958.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>334.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>2007.000000</td>\n",
              "      <td>129975.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>730.500000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>69.000000</td>\n",
              "      <td>9478.500000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1973.000000</td>\n",
              "      <td>1994.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>383.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>477.500000</td>\n",
              "      <td>991.500000</td>\n",
              "      <td>1087.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1464.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1977.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>480.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>2008.000000</td>\n",
              "      <td>163000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1095.250000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>11601.500000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>2000.000000</td>\n",
              "      <td>2004.000000</td>\n",
              "      <td>166.000000</td>\n",
              "      <td>712.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>808.000000</td>\n",
              "      <td>1298.250000</td>\n",
              "      <td>1391.250000</td>\n",
              "      <td>728.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1776.750000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2001.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>576.000000</td>\n",
              "      <td>168.000000</td>\n",
              "      <td>68.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>2009.000000</td>\n",
              "      <td>214000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1460.000000</td>\n",
              "      <td>190.000000</td>\n",
              "      <td>313.000000</td>\n",
              "      <td>215245.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>2010.000000</td>\n",
              "      <td>2010.000000</td>\n",
              "      <td>1600.000000</td>\n",
              "      <td>5644.000000</td>\n",
              "      <td>1474.000000</td>\n",
              "      <td>2336.000000</td>\n",
              "      <td>6110.000000</td>\n",
              "      <td>4692.000000</td>\n",
              "      <td>2065.000000</td>\n",
              "      <td>572.000000</td>\n",
              "      <td>5642.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2010.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1418.000000</td>\n",
              "      <td>857.000000</td>\n",
              "      <td>547.000000</td>\n",
              "      <td>552.000000</td>\n",
              "      <td>508.000000</td>\n",
              "      <td>480.000000</td>\n",
              "      <td>738.000000</td>\n",
              "      <td>15500.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2010.000000</td>\n",
              "      <td>755000.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Id   MSSubClass  ...       YrSold      SalePrice\n",
              "count  1460.000000  1460.000000  ...  1460.000000    1460.000000\n",
              "mean    730.500000    56.897260  ...  2007.815753  180921.195890\n",
              "std     421.610009    42.300571  ...     1.328095   79442.502883\n",
              "min       1.000000    20.000000  ...  2006.000000   34900.000000\n",
              "25%     365.750000    20.000000  ...  2007.000000  129975.000000\n",
              "50%     730.500000    50.000000  ...  2008.000000  163000.000000\n",
              "75%    1095.250000    70.000000  ...  2009.000000  214000.000000\n",
              "max    1460.000000   190.000000  ...  2010.000000  755000.000000\n",
              "\n",
              "[8 rows x 38 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QpOQrQtnNqzA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "3057d910-61f7-4a2c-d7e7-41c4d4e21ffc"
      },
      "source": [
        "import seaborn as sns\n",
        "sns.boxplot(y=df2['BsmtFinSF2'])"
      ],
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f081ebed400>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 154
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G1eVx9eLB-Jt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7V-WPNj1BeSY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "0d36f39e-ab3c-491d-d7d5-768916e7cf9a"
      },
      "source": [
        "BsmtFinSF2_Q1 = df2['BsmtFinSF2'].quantile(0.25)\n",
        "BsmtFinSF2_Q3 = df2['BsmtFinSF2'].quantile(0.75)\n",
        "IQR = BsmtFinSF2_Q3-BsmtFinSF2_Q1\n",
        "\n",
        "BsmtFinSF2_max = BsmtFinSF2_Q3 + (1.5*IQR)\n",
        "\n",
        "\n",
        "df3 = df2[df2['BsmtFinSF2'] <= BsmtFinSF2_max]\n",
        "dfd=df3\n",
        "dfd.loc[dfd['BsmtFinSF2'] <= BsmtFinSF2_max]['BsmtFinSF2'] = BsmtFinSF2_max\n",
        "dfd\n",
        "print(BsmtFinSF2_max)\n",
        "\n",
        "df2[df2['BsmtFinSF2'] > BsmtFinSF2_max]['BsmtFinSF2']"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.0\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7         32\n",
              "24       668\n",
              "26       486\n",
              "42        93\n",
              "43       491\n",
              "44       506\n",
              "52       712\n",
              "73       362\n",
              "77        41\n",
              "107      169\n",
              "113      869\n",
              "114      150\n",
              "116      670\n",
              "129       28\n",
              "153     1080\n",
              "165      181\n",
              "166      768\n",
              "172      215\n",
              "173      374\n",
              "174      208\n",
              "177      441\n",
              "197      184\n",
              "201      279\n",
              "207      306\n",
              "223      180\n",
              "233      712\n",
              "253      580\n",
              "260      690\n",
              "263      692\n",
              "265      228\n",
              "        ... \n",
              "1220     600\n",
              "1221     492\n",
              "1230     211\n",
              "1242     168\n",
              "1249      96\n",
              "1253    1031\n",
              "1259     438\n",
              "1272     375\n",
              "1282     144\n",
              "1286      81\n",
              "1299     906\n",
              "1308     608\n",
              "1315     276\n",
              "1320     661\n",
              "1346      68\n",
              "1367     173\n",
              "1369     972\n",
              "1370     105\n",
              "1377     420\n",
              "1386     469\n",
              "1387     546\n",
              "1396     334\n",
              "1398     352\n",
              "1418     872\n",
              "1424     374\n",
              "1439     110\n",
              "1445     627\n",
              "1456     163\n",
              "1458    1029\n",
              "1459     290\n",
              "Name: BsmtFinSF2, Length: 167, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HR4YDa45OV6Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "LotArea_Q1 = df2['LotArea'].quantile(0.25)\n",
        "LotArea_Q3 = df2['LotArea'].quantile(0.75)\n",
        "IQR = LotArea_Q3-LotArea_Q1\n",
        "\n",
        "LotArea_max = LotArea_Q3 + (1.5*IQR)\n",
        "\n",
        "\n",
        "df3 = df2[df2['LotArea'] <= LotArea_max]\n",
        "dfd=df3\n",
        "dfd.loc[dfd['LotArea'] <= LotArea_max]['LotArea'] = 17673.5\n",
        "dfd\n",
        "#rint(LotArea_max)\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0e7JBcj-Om_A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "c01a9965-502f-4a86-99f2-b3dd8f551379"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "scat = plt.scatter(x=df2['LotArea'], y=df2['SalePrice'])"
      ],
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XKnJjH0-T-si",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "9ba0b88d-052b-4d46-d5d0-3ca7b35e5404"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "#df3 = df2['Lot']\n",
        "\n",
        "scat = plt.scatter(x=df3['LotArea'], y=df3['SalePrice'])"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ob99CLSRUcDA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "db02b15f-f524-46cd-d12c-a51b412490d6"
      },
      "source": [
        "from sklearn import linear_model\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "#linear_model\n",
        "skl = linear_model.LinearRegression()\n",
        "\n",
        "arr = np.float64(df2['BsmtFinSF2'])\n",
        "arr1 = np.reshape(arr,(len(df2),1))\n",
        "\n",
        "\n",
        "\n",
        "skl.fit(arr1,df2['SalePrice'])\n",
        "pred = skl.predict(arr1)\n",
        "plt.scatter(x=df2['BsmtFinSF2'], y=df2['SalePrice'])\n",
        "plt.plot(arr1, pred, color='blue', linewidth=3)\n",
        "\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "print(skl.coef_,skl.intercept_)\n",
        "plt.show()\n"
      ],
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-5.60321424] 181182.02167533064\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "20KCqNgPpQie",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "83f7dfed-1ea8-4b59-8511-71080fe87a88"
      },
      "source": [
        "from sklearn import linear_model\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "#linear_model\n",
        "skl = linear_model.LinearRegression()\n",
        "\n",
        "arr = np.float64(df3['BsmtFinSF2'])\n",
        "arr1 = np.reshape(arr,(len(df3),1))\n",
        "\n",
        "\n",
        "\n",
        "skl.fit(arr1,df3['SalePrice'])\n",
        "pred = skl.predict(arr1)\n",
        "plt.scatter(x=df3['BsmtFinSF2'], y=df3['SalePrice'])\n",
        "plt.plot(arr1, pred, color='blue', linewidth=3)\n",
        "\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "print(skl.coef_,skl.intercept_)\n",
        "plt.show()\n"
      ],
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-5.60321424] 181182.02167533064\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HkteLlGisUeW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "a0fd0869-1449-4838-b36e-1c6b1e4ae9f1"
      },
      "source": [
        "from sklearn import linear_model\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "#linear_model\n",
        "skl = linear_model.LinearRegression()\n",
        "\n",
        "arr = np.float64(dfd['LotArea'])\n",
        "arr1 = np.reshape(arr,(len(dfd),1))\n",
        "\n",
        "\n",
        "\n",
        "skl.fit(arr1,dfd['SalePrice'])\n",
        "pred = skl.predict(arr1)\n",
        "plt.scatter(x=dfd['LotArea'], y=dfd['SalePrice'])\n",
        "plt.plot(arr1, pred, color='blue', linewidth=3)\n",
        "\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "print(skl.coef_,skl.intercept_)\n",
        "plt.show()"
      ],
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[9.55185837] 88771.92886711944\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WDu84AFrnC-8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "19b573c0-854f-4d03-87cb-0fbcbb3437fa"
      },
      "source": [
        "print(skl.coef_,skl.intercept_)"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[9.55185837] 88771.92886711944\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SPONaA0bVdeo",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "outputId": "e1ae5c75-60cc-4618-b07b-6da8fd68c7ef"
      },
      "source": [
        "#print(__doc__)\n",
        "\n",
        "\n",
        "# Code source: Jaques Grobler\n",
        "# License: BSD 3 clause\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from sklearn import datasets, linear_model\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Load the diabetes dataset\n",
        "diabetes = datasets.load_diabetes()\n",
        "\n",
        "\n",
        "# Use only one feature\n",
        "diabetes_X = diabetes.data[:, np.newaxis, 2]\n",
        "\n",
        "# Split the data into training/testing sets\n",
        "diabetes_X_train = diabetes_X[:-20]\n",
        "diabetes_X_test = diabetes_X[-20:]\n",
        "\n",
        "# Split the targets into training/testing sets\n",
        "diabetes_y_train = diabetes.target[:-20]\n",
        "diabetes_y_test = diabetes.target[-20:]\n",
        "\n",
        "# Create linear regression object\n",
        "regr = linear_model.LinearRegression()\n",
        "\n",
        "# Train the model using the training sets\n",
        "regr.fit(diabetes_X_train, diabetes_y_train)\n",
        "\n",
        "# Make predictions using the testing set\n",
        "diabetes_y_pred = regr.predict(diabetes_X_test)\n",
        "\n",
        "# The coefficients\n",
        "print('Coefficients: \\n', regr.coef_)\n",
        "# The mean squared error\n",
        "print(\"Mean squared error: %.2f\"\n",
        "      % mean_squared_error(diabetes_y_test, diabetes_y_pred))\n",
        "# Explained variance score: 1 is perfect prediction\n",
        "print('Variance score: %.2f' % r2_score(diabetes_y_test, diabetes_y_pred))\n",
        "\n",
        "# Plot outputs\n",
        "plt.scatter(diabetes_X_test, diabetes_y_test,  color='black')\n",
        "plt.plot(diabetes_X_test, diabetes_y_pred, color='blue', linewidth=3)\n",
        "\n",
        "plt.xticks(())\n",
        "plt.yticks(())\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Coefficients: \n",
            " [938.23786125]\n",
            "Mean squared error: 2548.07\n",
            "Variance score: 0.47\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nBIEMAJb4L/4/ciktfwZ6AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KQVXdgnFjQBy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e3cfa4da-8db4-4aac-f324-456ce738ab7e"
      },
      "source": [
        "diabetes_X_test.shape"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(20, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aVnkMeqcjVE5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8dead987-90ca-4548-96cd-a33cc6537385"
      },
      "source": [
        "diabetes_y_pred.shape"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(20,)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xRAV76yGjXx4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "test=np.float64(df2['LotArea'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cj9mP-Zsjg4I",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "2de45afd-01e6-4b5f-e614-ebb6596b6f9d"
      },
      "source": [
        "diabetes.data[:, np.newaxis, 2].shape"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(442, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VZMRs9okkfE5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 425
        },
        "outputId": "113dac2e-0f37-4140-ff79-75f4adbda347"
      },
      "source": [
        "np.reshape(test, (1460, 1)).shape"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5066\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5067\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5068\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'Series' object has no attribute 'reshape'",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-64-661a853c057e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'LotArea'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1460\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mreshape\u001b[0;34m(a, newshape, order)\u001b[0m\n\u001b[1;32m    290\u001b[0m            [5, 6]])\n\u001b[1;32m    291\u001b[0m     \"\"\"\n\u001b[0;32m--> 292\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'reshape'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnewshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    293\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0;31m# a downstream library like 'pandas'.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mAttributeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_wrapit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapit\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     48\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__array_wrap__\u001b[0;34m(self, result, context)\u001b[0m\n\u001b[1;32m    733\u001b[0m         \"\"\"\n\u001b[1;32m    734\u001b[0m         return self._constructor(result, index=self.index,\n\u001b[0;32m--> 735\u001b[0;31m                                  copy=False).__finalize__(self)\n\u001b[0m\u001b[1;32m    736\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    737\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array_prepare__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, dtype, name, copy, fastpath)\u001b[0m\n\u001b[1;32m    260\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    261\u001b[0m                 data = sanitize_array(data, index, dtype, copy,\n\u001b[0;32m--> 262\u001b[0;31m                                       raise_cast_failure=True)\n\u001b[0m\u001b[1;32m    263\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    264\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSingleBlockManager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfastpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36msanitize_array\u001b[0;34m(data, index, dtype, copy, raise_cast_failure)\u001b[0m\n\u001b[1;32m    656\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0msubarr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 658\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Data must be 1-dimensional'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    659\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    660\u001b[0m             \u001b[0msubarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray_tuplesafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Data must be 1-dimensional"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i1hlQ0SvlpAL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "26ff44ba-44ec-4f8f-b1a2-0450536760c6"
      },
      "source": [
        "LotArea_Q1 = df2['LotArea'].quantile(0.25)\n",
        "LotArea_Q3 = df2['LotArea'].quantile(0.75)\n",
        "IQR = LotArea_Q3-LotArea_Q1\n",
        "\n",
        "LotArea_max = LotArea_Q3 + (1.5*IQR)\n",
        "\n",
        "df3 = df2[df2['LotArea'] <= LotArea_max]\n",
        "dfd=df2\n",
        "\n",
        "dfd.loc[dfd.loc[:,'LotArea'] >LotArea_max,'LotArea'] = 17673.5\n",
        "\n",
        "(df2['LotArea'] >LotArea_max).sum()"
      ],
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WQx0ViV-tm9G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}